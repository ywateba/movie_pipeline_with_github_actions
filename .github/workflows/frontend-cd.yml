name: Frontend CD Workflow

on:
  pull_request:
    branches: [main]
    paths:
      - 'frontend/**'
  push:
    branches: [main]
    paths:
      - 'frontend/**'
  workflow_dispatch:

env:
  ECR_REGISTRY: 470769016866.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: frontend
  TAG: ${{github.sha}}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ' 18.x'

      - name: Install dependencies
        run:  cd frontend && npm ci

      - name: Linting
        run:  cd frontend && npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ' 18.x'

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-


      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Run tests
        run: cd frontend && CI=true npm run test

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ' 18.x'

      - name: Get AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        run: |
          cd frontend

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$TAG

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install kubectl
        run: |
          KUBECTL_VERSION="v1.29.0"
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Get AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set Kubeconfig
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name $CLUSTER_NAME

      - name: Set up Kustomize
        run: |
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
          mv ./kustomize frontend/k8s

      - name: Deploy
        run: |
          cd frontend/k8s
          ./kustomize edit set image frontend=$ECR_REGISTRY/$ECR_REPOSITORY:$TAG
          ./kustomize build . | kubectl apply -f -