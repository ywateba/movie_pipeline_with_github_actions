name: Python CD workflow

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  ECR_REGISTRY: 470769016866.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: backend
  TAG: ${{github.sha}}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Set up Python
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: '3.10'

  #   - name: Cache pip packages
  #     uses: actions/cache@v2
  #     with:
  #       path: ~/.cache/pip
  #       key: ${{ runner.os }}-pip-${{ hashFiles('**/backend/Pipfile') }}
  #       restore-keys: |
  #         ${{ runner.os }}-pip-

  #   - name: Install pipenv
  #     run: python -m pip install pipenv

  #   - name: Install dependencies
  #     run: cd backend && pipenv install --dev

  #   - name: Lint with flake8
  #     run: cd backend && pipenv run lint

  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Set up Python
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: '3.10'

  #   - name: Cache pip packages
  #     uses: actions/cache@v2
  #     with:
  #       path: ~/.cache/pip
  #       key: ${{ runner.os }}-pip-${{ hashFiles('**/backend/Pipfile') }}
  #       restore-keys: |
  #         ${{ runner.os }}-pip-

  #   - name: Install pipenv
  #     run: python -m pip install pipenv

  #   - name: Install dependencies
  #     run: cd backend && pipenv install --dev

  #   - name: Run tests
  #     run: cd backend && pipenv run test

  build:
    #needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Get AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      run: |
        cd backend

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$TAG

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install kubectl
      run: |
        KUBECTL_VERSION="v1.29.0"
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        kubectl version --client

    - name: Get AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set Kubeconfig
      run: |
        aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name $CLUSTER_NAME
        kubectl get nodes

    - name: Set up Kustomize
      run: |
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
        mv ./kustomize backend/k8s

    - name: Deploy
      run: |
        cd backend/k8s
        ./kustomize edit set image backend=$ECR_REGISTRY/$ECR_REPOSITORY:$TAG
        ./kustomize build . | kubectl apply -f -
